import heapq
from collections import defaultdict, OrderedDict


class Vehicle:
    def __init__(self, registration_number, type):
        self.registration_number = registration_number
        self.type = type

    def __str__(self):
        return "Vehicle [registration_number=" + self.registration_number + ", type=" + self.type + "]"


class ParkingLot:
    def __init__(self, total_slots):
        self.registration_slot_mapping = dict()
        self.type_registration_mapping = defaultdict(list)
        # we need to maintain the orders of vehicles while showing 'status'
        self.slot_vehicle_mapping = OrderedDict()

        self.available_parking_lots = []
 
        for i in range(1, total_slots + 1):
            heapq.heappush(self.available_parking_lots, i)

    def status(self):
        for slot, vehicle in self.slot_vehicle_mapping.items():
            print("Slot no: {} {}".format(slot, vehicle))

    def get_nearest_slot(self):
        return heapq.heappop(self.available_parking_lots) if self.available_parking_lots else None

    def free_slot(self, slot_to_be_freed):
        found = None
        for registration_no, slot in self.registration_slot_mapping.items():
            if slot == slot_to_be_freed:
                found = registration_no

        if found:
            del self.registration_slot_mapping[found]
            vehicle_to_leave = self.slot_vehicle_mapping[slot_to_be_freed]
            self.type_registration_mapping[vehicle_to_leave.type].remove(found)
            del self.slot_vehicle_mapping[slot_to_be_freed]
            print("leave ", slot_to_be_freed)
        else:
            print("slot is not in use")

    def park_vehicle(self, vehicle):
        slot_no = self.get_nearest_slot()
        if slot_no is None:
            print("Sorry, parking lot is full")
            return
        self.slot_vehicle_mapping[slot_no] = vehicle
        self.registration_slot_mapping[vehicle.registration_number] = slot_no
        self.type_registration_mapping[vehicle.type].append(vehicle.registration_number)

    def get_registration_nos_by_type(self, type):
        return self.type_registration_mapping[type]

    def get_slot_numbers_by_type(self, type):
        return [self.registration_slot_mapping[reg_no] for reg_no in self.type_registration_mapping[type]]


if __name__ == "__main__":
    parking_lot = ParkingLot(6)
    print(parking_lot.available_parking_lots)

    vehicle = Vehicle("PB-21-BJ-1234", "Suv")
    parking_lot.park_vehicle(vehicle)

    vehicle = Vehicle("PB-21-BJ-9999", "Suv")
    parking_lot.park_vehicle(vehicle)

    vehicle = Vehicle("PB-21-BB-0001", "Bike")
    parking_lot.park_vehicle(vehicle)

    vehicle = Vehicle("PB-21-BJ-7777", "Pickup van")
    parking_lot.park_vehicle(vehicle)

    vehicle = Vehicle("PB-21-BJ-2701", "Car")
    parking_lot.park_vehicle(vehicle)

    vehicle = Vehicle("PB-21-BJ-3141", "Bike")
    parking_lot.park_vehicle(vehicle)


    slot_no = parking_lot.get_nearest_slot()
    print(slot_no)
    slot_no = parking_lot.get_nearest_slot()
    print(slot_no)

    slot_no_to_be_freed = 4
    parking_lot.free_slot(slot_no_to_be_freed)

    heapq.heappush(parking_lot.available_parking_lots, 4)

    vehicle = Vehicle("PB-01-BJ-333", "Suv")
    parking_lot.park_vehicle(vehicle)

    vehicle = Vehicle("DL-12-AA-9999", "Suv")
    parking_lot.park_vehicle(vehicle)
    parking_lot.status()
    print(parking_lot.available_parking_lots)
    print(parking_lot.registration_slot_mapping)
    print(parking_lot.type_registration_mapping)

    registration_numbers = parking_lot.get_registration_nos_by_type('Suv')
    print("Suv : {}".format(registration_numbers))
    registration_numbers = parking_lot.get_registration_nos_by_type('Pickup van')
    print("Pickup van : {}".format(registration_numbers))
    registration_numbers = parking_lot.get_registration_nos_by_type('Bike')
    print("Bike : {}".format(registration_numbers))

    slot_nos = parking_lot.get_slot_numbers_by_type('Suv')
    print("Suv : {}".format(slot_nos))
    slot_nos = parking_lot.get_slot_numbers_by_type('Pickup van')
    print("Pickup van : {}".format(slot_nos))
    slot_nos = parking_lot.get_slot_numbers_by_type('Bike')
    print("Bike : {}".format(slot_nos))
    parking_lot.status()
    parking_lot.free_slot(1)
    parking_lot.free_slot(2)
    parking_lot.free_slot(3)
    parking_lot.status()
